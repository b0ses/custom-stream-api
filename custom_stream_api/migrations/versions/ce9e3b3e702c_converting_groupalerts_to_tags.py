"""Converting GroupAlerts to Tags

Revision ID: ce9e3b3e702c
Revises: d11236dc9b5d
Create Date: 2025-06-14 19:28:13.520189

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ce9e3b3e702c'
down_revision = 'd11236dc9b5d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()

    op.drop_column('alert', 'duration')
    op.create_unique_constraint(None, 'alert', ['name'])

    op.create_table('tag',
        sa.Column('id', sa.Integer(), unique=True, nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('name', sa.Text(), nullable=False),
        sa.Column('thumbnail', sa.Text(), nullable=True),
        sa.Column('current_index', sa.Integer(), nullable=True),
        sa.Column('always_chat', sa.Boolean(), server_default='f', nullable=False),
        sa.Column('chat_message', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )

    conn.execute(sa.text("""
        INSERT INTO tag (created_at, name, thumbnail, current_index, always_chat, chat_message)
        SELECT
            created_at,
            group_name AS "name",
            thumbnail,
            current_index,
            always_chat,
            chat_message
        FROM group_alert
    """))

    op.create_table('tag_association',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('tag_name', sa.Text(), nullable=False),
        sa.Column('alert_name', sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('tag_name', 'alert_name', name='_tag_uc')
    )
    conn.execute(sa.text("""
        INSERT INTO tag_association (tag_name, alert_name)
        SELECT
            tag.name AS "tag_name",
            alert.name AS "alert_name"
        FROM group_alert_association AS gaa
        JOIN alert ON gaa.alert_name=alert.name
        JOIN tag ON tag.name=gaa.group_name
    """))

    op.drop_constraint(op.f('count_pkey'), 'count', type_='primary')
    conn.execute(sa.text("""
        ALTER TABLE count 
        ADD COLUMN id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY;
    """))
    op.add_column('count', sa.Column('tag_name', sa.Text()))
    conn.execute(sa.text("""
        UPDATE count
        SET
            tag_name = tag.name
        FROM tag
        WHERE count.group_name = tag.name
    """))

    op.create_unique_constraint(None, 'count', ['name'])
    op.drop_constraint(op.f('group_alert_count_fk'), 'count', type_='foreignkey')
    op.create_foreign_key('tag_count_fk', 'count', 'tag', ['tag_name'], ['name'])
    op.drop_column('count', 'group_name')

    op.drop_table('group_alert_association')
    op.drop_table('group_alert')

    op.drop_constraint(op.f('alert_pkey'), 'alert', type_='primary')
    conn.execute(sa.text("""
        ALTER TABLE alert 
        ADD COLUMN id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY;
    """))

    # foreign key constraints on tag_association
    op.create_foreign_key('tag_association_alert_fk', 'tag_association', 'alert', ['alert_name'], ['name'], ondelete='CASCADE')
    op.create_foreign_key('tag_association_tag_fk', 'tag_association', 'tag', ['tag_name'], ['name'], ondelete='CASCADE')

    # Add ID column to aliases
    op.drop_constraint(op.f('alias_pkey'), 'alias', type_='primary')
    conn.execute(sa.text("""
        ALTER TABLE alias
        ADD COLUMN id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY;
    """))
    op.create_unique_constraint(None, 'alias', ['alias'])

    # list / list_item
    op.drop_constraint(op.f('list_item_list_name_fkey'), 'list_item', type_='foreignkey')
    op.create_unique_constraint(None, 'list', ['name'])

    op.drop_constraint(op.f('list_pkey'), 'list', type_='primary')
    conn.execute(sa.text("""
        ALTER TABLE list 
        ADD COLUMN id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY;
    """))
    op.create_foreign_key('list_item_list_name_fkey', 'list_item', 'list', ['list_name'], ['name'])

    op.drop_constraint(op.f('list_item_pkey'), 'list_item', type_='primary')
    op.drop_column('list_item', 'id')
    conn.execute(sa.text("""
        ALTER TABLE list_item
        ADD COLUMN id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY;
    """))

    # Add ID column to timer
    op.drop_constraint(op.f('timer_pkey'), 'timer', type_='primary')
    conn.execute(sa.text("""
        ALTER TABLE timer 
        ADD COLUMN id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY;
    """))
    op.create_unique_constraint(None, 'timer', ['command'])

    # Locking in the random tag functionality
    conn.execute(sa.text(""" 
        DELETE
        FROM tag_association
        WHERE tag_name = 'random';
        DELETE
        FROM tag
        WHERE name = 'random';
        INSERT
        INTO tag (created_at, name)
        VALUES ('1970-01-01', 'random');        
    """))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
